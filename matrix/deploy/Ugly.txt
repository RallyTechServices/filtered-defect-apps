<!DOCTYPE html>
<html>
<head>
    <title>Filtered Defect Matrix</title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Sun Feb 26 2017 15:53:31 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sun Feb 26 2017 15:53:31 GMT-0700 (MST)";
        var STORY    = "--";
        var BUILDER  = "kcorkan";
        var CHECKSUM = 26244639499;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns) 
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->
    
    
    <script type="text/javascript">
        Rally.onReady(function() {
            Ext.define("Rally.technicalservices.InfoLink",{extend:"Rally.ui.dialog.Dialog",alias:"widget.tsinfolink",informationHtml:null,title:"Build Information",defaults:{padding:5,margin:5},closable:!0,draggable:!0,autoShow:!0,width:350,informationalConfig:null,items:[{xtype:"container",itemId:"information"}],initComponent:function(){Ext.id(this);this.title="<span class='icon-help'> </span>"+this.title,this.callParent(arguments)},_generateChecksum:function(a){var b,c=305419896;for(a=a.replace(/var CHECKSUM = .*;/,""),a=a.replace(/var BUILDER  = .*;/,""),a=a.replace(/\s/g,""),b=0;b<a.length;b++)c+=a.charCodeAt(b)*b;return c},_checkChecksum:function(a){var b=Ext.create("Deft.Deferred"),c=this;return Ext.Ajax.request({url:document.URL,params:{id:1},success:function(a){if(text=a.responseText,CHECKSUM){var d=c._generateChecksum(text);if(CHECKSUM!==d)return void b.resolve(!1)}b.resolve(!0)}}),b.promise},_addToContainer:function(a){var b=Ext.apply({xtype:"container",height:200,overflowY:!0},this.informationalConfig);a.add(b)},afterRender:function(){var a=Rally.getApp();if(!Ext.isEmpty(this.informationalConfig)){var b=this.down("#information");this._addToContainer(b)}a.isExternal()?this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"... Running externally"}):this._checkChecksum(a).then({scope:this,success:function(a){a||this.addDocked({xtype:"container",cls:"build-info",dock:"bottom",padding:2,html:'<span class="icon-warning"> </span>Checksums do not match'})},failure:function(a){console.log("oops:",a)}}),this.callParent(arguments)},beforeRender:function(){if(this.callParent(arguments),this.informationHtml&&this.addDocked({xtype:"component",componentCls:"intro-panel",padding:2,html:this.informationHtml,doc:"top"}),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"This app was created by the CA AC Technical Services Team."}),APP_BUILD_DATE){var a=Ext.String.format("Built on: {0} <br/>Built by: {1}",APP_BUILD_DATE,BUILDER);STORY&&(a=a+"<br/>Source story: "+STORY),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:a})}}}),Ext.define("Rally.technicalservices.Logger",{constructor:function(a){Ext.apply(this,a)},log:function(a){var b="[ "+Ext.util.Format.date(new Date,"Y-m-d H:i:s.u")+" ]",c=[];c=Ext.Array.push(c,[b]),c=Ext.Array.push(c,Ext.Array.slice(arguments,0)),window.console&&console.log.apply(console,c)}}),Ext.override(Rally.ui.picker.MilestonePicker,{initEvents:function(){this.callParent(arguments),this.on("afterrender",this._onAfterRender,this,{single:!0}),this.on("afteralignpicker",this._selectCheckboxes,this),this.on("expand",this._onInitialExpand,this,{single:!0}),this._initInputEvents(),this._autoExpand(),this.rendered?this.createStore():this.on("afterrender",this.createStore,this,{single:!0})}}),Ext.override(Rally.ui.combobox.FieldValueComboBox,{_loadStoreValues:function(){this.field.getAllowedValueStore({context:this.context&&_.isFunction(this.context.getDataContext)?this.context.getDataContext():this.context}).load({requester:this,callback:function(a,b,c){var d=this.store;if(d){var e=[],f=_.map(_.filter(a,this._hasStringValue),this._convertAllowedValueToLabelValuePair,this);if("boolean"===this.field.getType())f=f.concat([this._convertToLabelValuePair("Yes",!0),this._convertToLabelValuePair("No",!1)]);else if(this.field.required===!1){var g="-- No Entry --",h=this.noEntryValue;this.getUseNullForNoEntryValue()&&(this.noEntryValue=h=null),"rating"===this.field.attributeDefinition.AttributeType.toLowerCase()&&(g=this.getRatingNoEntryString(),h="None"),e.push(this._convertToLabelValuePair(g,h))}if(this.getAllowInitialValue()&&this.config.value){var i=this.transformOriginalValue(this.config.value);if(this._valueNotInAllowedValues(i,f)){var j=this.config.value._refObjectName||i;e.push(this._convertToLabelValuePair(j,i))}}d.loadRawData(e.concat(f)),d.fireEvent("load",d,d.getRange(),c)}},scope:this})}}),Ext.define("RallyTechServices.filtereddefectapps.common.Settings",{singleton:!0,getFields:function(a,b){var c=a&&a.includeStates||[];Ext.isString(c)&&(c=c.split(","));var d=200,e=_.map(b,function(a){var b=Ext.Array.contains(c,a);return{boxLabel:a,name:"includeStates",inputValue:a,checked:b}});return[{xtype:"checkboxgroup",fieldLabel:"Active States",labelAlign:"right",labelWidth:d,columns:1,width:700,margin:"0 0 25 0",vertical:!0,items:e},{name:"dateRange",xtype:"rallynumberfield",fieldLabel:"Date Range",labelAlign:"right",labelWidth:d,minValue:0,afterBodyEl:" days"}]}}),Ext.define("RallyTechServices.filtereddefectapps.common.Toolbox",{singleton:!0,fetchDefectStates:function(){var a=Ext.create("Deft.Deferred");return Rally.data.ModelFactory.getModel({type:"Defect",success:function(b){Deft.Promise.all([RallyTechServices.filtereddefectapps.common.Toolbox.fetchAllowedValues(b,"State"),RallyTechServices.filtereddefectapps.common.Toolbox.fetchAllowedValues(b,"Priority")]).then({success:function(b){a.resolve(b)},failure:function(b){a.reject(b)}})}}),a.promise},fetchAllowedValues:function(a,b){var c=Ext.create("Deft.Deferred");return a.getField(b).getAllowedValueStore().load({callback:function(a,b,d){if(d){var e=_.map(a,function(a){return 0===a.get("StringValue").length?"None":a.get("StringValue")});c.resolve(e)}else c.reject("Error fetching category data")}}),c}}),Ext.define("RallyTechServices.filtereddefectapps.AppBase",{extend:"Rally.app.App",componentCls:"app",logger:new Rally.technicalservices.Logger,defaults:{margin:10},items:[{xtype:"container",itemId:"selector_box",layout:"hbox"},{xtype:"container",itemId:"filter_box",flex:1},{xtype:"container",itemId:"display_box",tpl:'<div class="no-data-container"><div class="secondary-message">{message}</div></div>'}],integrationHeaders:{name:"RallyTechServices.filtereddefectapps.AppBase"},config:{defaultSettings:{includeStates:[],includeMilestones:[],includePriorities:[],dateRange:30,startDate:null,endDate:null}},modelType:"Defect",includeStateFilter:!1,includePriorityPicker:!1,includeMilestonePicker:!1,includeTagPicker:!0,defectStates:null,dateFormat:"Y-m-d",milestoneData:{},launch:function(){this.logger.log("launch settings",this.getSettings());var a=[RallyTechServices.filtereddefectapps.common.Toolbox.fetchDefectStates()];this.includeMilestonePicker||a.push(this._fetchMilestoneData()),Deft.Promise.all(a).then({success:function(a){this.defectStates=a[0][0],this.defectPriorities=a[0][1],this.logger.log("results",a,this.defectStates),a.length>1&&(this.milestoneData=a[1],this.logger.log("launch milestoneData",this.milestoneData)),this.validateSettings()&&this._addSelectors()},failure:this.showErrorNotification,scope:this})},validateSettings:function(){var a=this.getActiveDefectStates();return this.logger.log("validateSettings",a),a&&0!==a.length?!0:(this.down("#display_box").update({message:"Please use the app settings to configure at least 1 active defect state."}),!1)},showErrorNotification:function(a){Rally.ui.notify.Notifier.showError({message:a})},getActiveDefectStates:function(){var a=this.getSetting("includeStates")||[];return Ext.isArray(a)?a:a.split(",")},_addSelectors:function(){if(this.getSelectorBox().removeAll(),this.includeStateFilter){var a=this.getSelectorBox().add({xtype:"rallyfieldvaluecombobox",itemId:"statePicker",margin:"25 5 5 5",fieldLabel:"",emptyText:"Filter by State...",model:this.modelType,field:"State",multiSelect:!0,labelAlign:"right",stateful:!0,stateId:this.getContext().getScopedStateId("statePicker"),width:200});a.on("select",this._selectorsUpdated,this),a.on("change",this._checkFilterCleared,this)}if(this.includePriorityPicker){var b=this.getSelectorBox().add({xtype:"rallyfieldvaluecombobox",itemId:"priorityPicker",margin:"25 5 5 5",fieldLabel:"",model:this.modelType,emptyText:"Filter by Priority...",field:"Priority",multiSelect:!0,labelAlign:"right",stateful:!0,stateId:this.getContext().getScopedStateId("priorityPicker"),width:200});b.on("select",this._selectorsUpdated,this),b.on("change",this._checkFilterCleared,this)}if(this.includeMilestonePicker){var c=this.getSelectorBox().add({xtype:"rallymilestonepicker",storeConfig:{context:{project:null},fetch:["Name","TargetDate","DisplayColor"]},matchFieldName:"Name",emptyText:"Filter by Milestones...",margin:"25 5 5 5",fieldLabel:"",labelAlign:"right",labelSeparator:"",showSearchIcon:!0,itemId:"milestonePicker",stateId:this.getContext().getScopedStateId("milestonePicker"),stateful:!0,width:200});c.on("selectionchange",this._selectorsUpdated,this)}if(this.includeTagPicker){var d=this.getSelectorBox().add({xtype:"rallytagpicker",margin:"25 5 5 5",emptyText:"Filter by Tags...",labelSeparator:"",itemId:"tagPicker",stateId:this.getContext().getScopedStateId("tagPicker"),stateful:!0,width:200});d.on("selectionchange",this._selectorsUpdated,this)}this._selectorsUpdated()},_selectorsUpdated:function(a){if(a&&("tagPicker"===a.itemId||"milestonePicker"===a.itemId)){var b=a.getValue(),c="";this.logger.log("updateView pickerValues",a.getValue(),b.length),b.length>0&&(c=b[0].get("Name"),b.length>1&&(c=Ext.String.format("{0} (+{1})",c,b.length-1))),a.setValueText(c)}this.fireEvent("filtersupdated",this.getFilterFindConfig())},getMilestones:function(){var a=Ext.Array.map(Ext.Object.getKeys(this.milestoneData),function(a){return Number(a)});return this.includeMilestonePicker?(a=this.down("#milestonePicker")&&this.down("#milestonePicker").getValue()||[],this.milestoneData=_.reduce(a,function(a,b){return a[b.get("ObjectID")]=b.getData(),a},{}),this.getObjectIDList(a)):(this.logger.log("getMilestones",a),a)},getPriorities:function(){if(this.includePriorityPicker)return this.down("#priorityPicker")&this.down("#priorityPicker").getValue()||[];var a=this.getSetting("includePriorities")||[];return this.logger.log("getPriorities",a),a&&Ext.isString(a)&&(a=a.split(",")),a},getFilterFindConfig:function(){var a=this.getMilestones(),b=this.down("rallytagpicker").getValue(),c=this.down("#statePicker")&&this.down("#statePicker").getValue(),d=this.getPriorities();this.logger.log("getFilterFindConfig",c,a,b||"no tags",d);var e={_TypeHierarchy:this.modelType};return a&&a.length>0&&(e.Milestones={$in:a}),b&&b.length>0&&(e.Tags={$in:this.getObjectIDList(b)}),c&&c.length>0&&(e.State={$in:c}),d&&d.length>0&&(e.Priority={$in:d}),this.logger.log("getFilterFindConfig",e),e},_checkFilterCleared:function(a,b,c){this.logger.log("checkFilterCleared",a.itemId,b,c,a.getValue()),b&&0===b.length&&this.updateView()},getPlotlines:function(){var a=[];return this.logger.log("getPlotlines",this.milestoneData),Ext.Object.each(this.milestoneData,function(b,c){if(this.logger.log("getPlotlines",b,c),c.TargetDate){for(var d=this.getStartDate(),e=0;c.TargetDate>d;)d=Rally.util.DateTime.add(d,"day",1),d.getDay()>0&&d.getDay()<6&&e++;var f=c.DisplayColor||"#F6F6F6",g="solid";"##F6F6F6"===f&&(g="dash"),a.push({color:f,dashStyle:g,width:2,value:e-1,label:{rotation:0,y:15,style:{color:"#888",fontSize:"11px",fontFamily:"ProximaNovaSemiBold",fill:"#888"},text:c.Name},zIndex:3})}},this),a},_fetchMilestoneData:function(){var a=this.getSetting("includeMilestones")||[];this.logger.log("getMilestones includeMilestones setting",a),a&&Ext.isString(a)&&(a=a.split(",")),a=Ext.Array.map(a,function(a){return Number(a.split("/").slice(-1)[0])});var b=Ext.create("Deft.Deferred");if(a&&a.length>0){var c=Ext.Array.map(a,function(a){return{property:"ObjectID",value:a}});c=Rally.data.wsapi.Filter.or(c),Ext.create("Rally.data.wsapi.Store",{fetch:["FormattedID","Name","TargetDate","DisplayColor"],filters:c,model:"Milestone",limit:a.length}).load({callback:function(a,c){if(c.wasSuccessful()){var d=_.reduce(a,function(a,b){return a[b.get("ObjectID")]=b.getData(),a},{});b.resolve(d)}else b.resolve("Error loading milestone data: "+c.error.errors.join(","))}})}else b.resolve({});return b.promise},getObjectIDList:function(a){return Ext.Array.map(a,function(a){return a.get("ObjectID")})},getModelNames:function(){return[this.modelType]},getSelectorBox:function(){return this.down("#selector_box")},getDisplayBox:function(){return this.down("#display_box")},getOptions:function(){return[{text:"About...",handler:this._launchInfo,scope:this}]},getSettingsFields:function(){var a=this.defectStates,b=this.getSetting("includeStates")||[];Ext.isString(b)&&(b=b.split(","));var c=this.getSetting("includePriorities")||[];Ext.isString(c)&&(c=c.split(","));var d=this.getSetting("includeMilestones");this.logger.log("getSettingsFields",b,c,d,a);var e=150,f=_.map(a,function(a){var c=Ext.Array.contains(b,a);return{boxLabel:a,name:"includeStates",inputValue:a,checked:c}}),g=_.map(this.defectPriorities,function(a){var b=Ext.Array.contains(c,a);return{boxLabel:a,name:"includePriorities",inputValue:a,checked:b}}),h=[];return this.includeMilestonePicker||h.push({xtype:"rallymilestonepicker",storeConfig:{context:{project:null},fetch:["Name","TargetDate","DisplayColor"]},matchFieldName:"Name",emptyText:"Configure Milestones...",margin:5,fieldLabel:"Milestone(s)",labelAlign:"right",labelWidth:e,labelSeparator:"",name:"includeMilestones",selectionKey:"_ref",value:d,width:400,listeners:{selectionchange:function(a){a.syncSelectionText()}}}),h.push({xtype:"checkboxgroup",fieldLabel:"Active States",labelAlign:"right",labelWidth:e,columns:3,width:600,margin:"0 0 25 0",vertical:!0,items:f}),this.includePriorityPicker||h.push({xtype:"checkboxgroup",fieldLabel:"Include Priorities",labelAlign:"right",labelWidth:e,columns:3,width:600,margin:"0 0 25 0",vertical:!0,items:g}),h},_launchInfo:function(){this.about_dialog&&this.about_dialog.destroy(),this.about_dialog=Ext.create("Rally.technicalservices.InfoLink",{})},isExternal:function(){return"undefined"==typeof this.getAppId()},getMilestoneSubtitle:function(){var a="(Any milestones)",b=Ext.Array.map(Ext.Object.getValues(this.milestoneData),function(a){var b=Ext.String.format("{0}: <b>{1}</b>",a.FormattedID,a.Name);return a.TargetDate&&(b+=" ("+Rally.util.DateTime.format(a.TargetDate,"d-m-Y")+")"),b});return b&&b.length>0&&(a=b.join(", ")),this.logger.log("getMilestoneSubtitle",a),a}}),Ext.define("CA.agile.technicalservices.HydrationHelper",{singleton:!0,getFieldModelType:function(a){return Ext.Array.contains(["Owner","SubmittedBy","Tester"],a)?"User":null},getFieldFetchList:function(a){var b=CA.agile.technicalservices.HydrationHelper.getFieldModelType(a);return"User"===b?["ObjectID","UserName","DisplayName","FirstName","LastName"]:["ObjectID"]},needsManualHydration:function(a){return Ext.Array.contains(["Owner","SubmittedBy"],a)},getHydrateConfig:function(a){return Ext.Array.contains(["Project","State","ScheduleState","Iteration","Release","Priority","Severity","Environment"],a)?[a]:void 0},getActualBucketFieldProperty:function(a){return Ext.Array.contains(["Owner","SubmittedBy","Tester"],a)?a+".DisplayName":"Project"===a?"Project.Name":a}}),Ext.define("CA.agile.technicalservices.HistoryMatrixCalculator",{extend:"Rally.data.lookback.calculator.TimeSeriesCalculator",getMetrics:function(){for(var a=[],b=0;b<this.buckets.length;b++){var c=this.buckets[b];a.push({field:this.bucketField,as:c.toString(),f:"filteredCount",filterField:this.bucketField,filterValues:[c],display:"column"})}return a},prepareChartData:function(a){var b=[],c=[];return a.each(function(a){var d=a.getData(),e=d[this.bucketField]||this.noneText;Ext.isObject(e)&&(console.log("bucketValue",e),e=e._refObjectName||e.Name),Ext.Array.contains(c,e)||c.push(e),d[this.bucketField]=e,b.push(d)},this),this.buckets=c,this.runCalculation(b)}}),Ext.define("RallyTechServices.filtereddefectapps.DefectHHistoryMatrix",{extend:"RallyTechServices.filtereddefectapps.AppBase",integrationHeaders:{name:"RallyTechServices.filtereddefectapps.DefectHHistoryMatrix"},noneText:"-- None --",bucketFieldWhitelist:["Project","Owner","SubmittedBy","ScheduleState","State","Priority","Severity","Environment"],bucketFieldAttributeTypeWhitelist:["STRING"],detailFetchFields:["FormattedID","Name","State","Priority","Milestones","Tags"],config:{defaultSettings:{artifactType:"Defect",historicalDays:4,bucketField:"SubmittedBy"}},launch:function(){this.callParent(arguments),Rally.dependencies.Analytics.load(function(){Ext.Function.defer(this.updateView(),1,this)},this),this.on("filtersupdated",this.updateView,this)},updateView:function(){this.getDisplayBox().removeAll(),this.fetchData()},getFilterFindConfig:function(){var a=this.getMilestones(),b=this.down("rallytagpicker")&&this.down("rallytagpicker").getValue(),c=this.getActiveDefectStates(),d=this.getPriorities();this.logger.log("getFilterFindConfig",c,a,b||"no tags",d);var e={_TypeHierarchy:this.modelType};return a&&a.length>0&&(e.Milestones={$in:a}),b&&b.length>0&&(e.Tags={$in:this.getObjectIDList(b)}),c&&c.length>0&&(e.State={$in:c}),d&&d.length>0&&(e.Priority={$in:d}),this.logger.log("getFilterFindConfig config",e),e},processData:function(a){this.setLoading(!1);var b=Ext.create("CA.agile.technicalservices.HistoryMatrixCalculator",{startDate:Rally.util.DateTime.fromIsoString(this.getIsoStartDate()),endDate:new Date,bucketField:this.getBucketField(),noneText:this.noneText}),c=b.prepareChartData(a);this.logger.log("processData",c),CA.agile.technicalservices.HydrationHelper.needsManualHydration(this.getBucketField())?(this.setLoading("Hydrating..."),this.fetchMetaData(b.buckets).then({success:function(a){this.buildGrid(c,a)},failure:function(a){this.showErrorNotification(a),this.buildGrid(c)},scope:this}).always(function(){this.setLoading(!1)},this)):this.buildGrid(c)},buildGrid:function(a,b){var c=this.getBucketField(),d=[c].concat(a.categories);this.logger.log("buildGrid",a,d,c);for(var e=[],f=0;f<a.series.length;f++){var g=a.series[f],h={};h[c]=g.name,b&&(b[g.name]||b[g.name.toString()])&&(h[c]=b[g.name]||b[g.name.toString()]);for(var i=0;i<a.categories.length;i++)h[a.categories[i]]=g.data[i];e.push(h)}this.logger.log("buildGrid storeData",e);var j=Ext.create("Rally.data.custom.Store",{fields:d,data:e,pageSize:e.length});this.getDisplayBox().removeAll();var k=this.getDisplayBox().add({xtype:"rallygrid",store:j,columnCfgs:this.getColumnCfgs(a.categories),showRowActionsColumn:!1,showPagingToolbar:!1});k.on("itemdblclick",this.showCurrentArtifacts,this)},showCurrentArtifacts:function(a,b){var c=this.down("rallymilestonepicker").getValue(),d=this.down("rallytagpicker").getValue(),e=this.down("#statePicker").getValue(),f=this.down("#priorityPicker").getValue();this.logger.log("showCurrentArtifacts",b,c,d,e,f);var g=b.get(this.getBucketField());g=g.replace(this.noneText,"");var h=CA.agile.technicalservices.HydrationHelper.getActualBucketFieldProperty(this.getBucketField());""===g&&(h=this.getBucketField());var i=Ext.create("Rally.data.wsapi.Filter",{property:h,value:g});if(e&&e.length>0){var j=this.getTempFilters("State",e);i=i.and(j)}if(this.logger.log("showCurrentArtifacts filters with states",i.toString()),f&&f.length>0){var j=this.getTempFilters("Priority",f);i=i.and(j)}if(this.logger.log("showCurrentArtifacts filters with priorities",i.toString()),c&&c.length>0){var j=this.getTempFilters("Milestones.ObjectID",c);i=i.and(j)}if(this.logger.log("showCurrentArtifacts filters with milestones",i.toString()),d&&d.length>0){var j=this.getTempFilters("Tags.ObjectID",d);i=i.and(j)}this.logger.log("showCurrentArtifacts filters with tags",i.toString()),Ext.create("CA.agile.technicalservices.DetailPopover",{context:this.getContext(),autoShow:!0,title:"Defects for "+this.getBucketField()+" ["+b.get(this.getBucketField())+"]",titleIconHtml:'<div class="icon-defect"></div>',modelNames:[this.getArtifactType()],target:a.getEl(),height:.95*this.getHeight(),gridConfig:{storeConfig:{filters:i,fetch:this.detailFetchFields,context:{project:null}},columnCfgs:this.detailFetchFields}})},getTempFilters:function(a,b){var c=Ext.Array.map(b,function(b){return"None"===b&&(b=""),{property:a,value:b}});return c.length>1?c=Rally.data.wsapi.Filter.or(c):Ext.create("Rally.data.wsapi.Filter",c[0])},getColumnCfgs:function(a){var b=[{dataIndex:this.getBucketField(),text:this.getBucketField(),flex:1}];return Ext.Array.each(a,function(a){b.push({dataIndex:a,text:a})}),b},fetchMetaData:function(a){var b=Ext.create("Deft.Deferred");this.logger.log("fetchMetaData",a);var c=[];return Ext.Array.each(a,function(a){isNaN(a)||c.push({property:"ObjectID",value:a})}),c.length>1&&(c=Rally.data.wsapi.Filter.or(c)),this.logger.log("filters",c,c.toString()),Ext.create("Rally.data.wsapi.Store",{model:CA.agile.technicalservices.HydrationHelper.getFieldModelType(this.getBucketField()),fetch:CA.agile.technicalservices.HydrationHelper.getFieldFetchList(this.getBucketField()),filters:c,enablePostGet:!0,limit:a.length,context:{project:null},pageSize:Math.min(2e3,a.length)}).load({callback:function(a,c){if(c.wasSuccessful()){var d=_.reduce(a,function(a,b){return a[b.get("ObjectID")]=b.get("_refObjectName"),a},{});b.resolve(d)}else b.reject("Error loading meta data.  Object IDs will be displayed instead:  "+c.error.errors.join(","))}}),b.promise},getObjectIDList:function(a){return Ext.Array.map(a,function(a){return a.get("ObjectID")})},fetchData:function(){var a=this.getFilterFindConfig();a._ValidTo={$gte:this.getIsoStartDate()},this.logger.log("fetchData",a,this.getBucketField()),this.setLoading(!0);var b=Ext.create("Rally.data.lookback.SnapshotStore",{findConfig:a,fetch:[this.getBucketField(),"_ValidFrom","_ValidTo"],limit:1/0,removeUnauthorizedSnapshots:!0,hydrate:CA.agile.technicalservices.HydrationHelper.getHydrateConfig(this.getBucketField())});b.on("load",this.processData,this),b.load()},getIsoStartDate:function(){var a=new Date;a.setHours(0),a.setMinutes(0),a.setSeconds(0);var b=Rally.util.DateTime.add(a,"day",this.getDaysBack()-1);return this.logger.log("getIsoStartDate",b),Rally.util.DateTime.toIsoString(b)},getDaysBack:function(){var a=this.getSetting("historicalDays")||5;return-a},getBucketField:function(){return this.getSetting("bucketField")||"Project"},getArtifactType:function(){return this.getSetting("artifactType")||"Defect"},getDisplayBox:function(){return this.down("#display_box")},getSelectorBox:function(){return this.down("#selector_box")},getSettingsFields:function(){var a=this.bucketFieldAttributeTypeWhitelist,b=this.bucketFieldWhitelist,c=200,d=this.callParent(arguments);return d.push({xtype:"rallynumberfield",name:"historicalDays",minValue:0,maxValue:25,fieldLabel:"# Historical Days",labelAlign:"right",labelWidth:c}),d.push({xtype:"rallyfieldcombobox",name:"bucketField",model:this.getArtifactType(),fieldLabel:"Bucket Field",labelAlign:"right",labelWidth:c,_isNotHidden:function(c){if(!c.readOnly&&!c.hidden&&c.attributeDefinition){var d=Ext.Array.contains(b,c.name);return d||(d=Ext.Array.contains(a,c.attributeDefinition.AttributeType)),d}return!1}}),d}});
            
               Rally.launchApp('RallyTechServices.filtereddefectapps.DefectHHistoryMatrix', {
                   name: 'Filtered Defect Matrix'
               });
        });
    </script>
    
    <style type="text/css">


.highcharts-tooltip {
    font-family:NotoSansBold;
    color:white;
}
.tooltip-point {
    text-align: right;
    color: white;
}
.tooltip-label {
    font-family:NotoSans;
    white-space:nowrap;
    font-size:13px;
    color:white;
}
.etlDate {
    color: grey;
    font-family: NotoSans;
    font-style: italic;
}
.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>